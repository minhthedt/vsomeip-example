@startuml
autonumber
!pragma teoz true

box "PC1 (192.168.1.7)" #LightBlue
  box "notify-sample"
    participant "sample.cpp" as sender
    participant "vsomeip::application" as app
  end box
  participant "routingmanager" as routmgr
end box

sender->app **:  vomeip::runtime::get()->create_application(VSOMEIP_APPLICATION_NAME)
sender->app: init()
app->app: loadConfig(VSOMEIP_CONFIGURATION)
sender->app: register_state_handler(on_state)
app->routmgr: VSOMEIP_REGISTER_APPLICATION (0x02)
sender->app: register_message_handler(SAMPLE_SERVICE_ID, SAMPLE_INSTANCE_ID, SAMPLE_SET_METHOD_ID, on_set)
sender->app: **<color blue>offer_event</color>**(SAMPLE_SERVICE_ID,SAMPLE_INSTANCE_ID, **<color blue>SAMPLE_EVENT_ID, event_groups</color>**, \n vsomeip::event_type_e::ET_FIELD, _cycle, _change_resets_cycle, _update_on_change, comparator, reliability_type_e );
sender->app: start()
return true

routmgr->app: VSOMEIP_REGISTERED_ACK (0x06)
app->sender: on_state(vsomeip::state_type_e _state)
opt _state = vsomeip::state_type_e::ST_REGISTERED
sender->app: **<color blue>offer_service</color>**(SAMPLE_SERVICE_ID, SAMPLE_INSTANCE_ID)
app->routmgr: OFFER_SERVICE(...)
end

===send notification==
sender->app: **<color blue>notify</color>**(SAMPLE_SERVICE_ID, SAMPLE_INSTANCE_ID, SAMPLE_EVENT_ID, payload_)

===receive request and send response==
app->sender: on_set(_message{SAMPLE_SERVICE_ID, SAMPLE_INSTANCE_ID, SAMPLE_SET_METHOD_ID, reliable, payload})
sender->sender: create_response(_message).setpayload(...) -> its_response
sender->app: **<color blue>send</color>**(its_response)
@endtuml